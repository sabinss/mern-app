## For gitignore file instead of creating manually use gitignore extension
 open command pannel , type .gitignore and type node .gitignore for generating gitignore for nodejs project


## Node version manager
- same project is used by multiple developer, I want all uses same nodejs version
- install nvm
- nvm ls 


## setup typescript
1 npm i -D typescript
2. npx tsc --init : it creates tsconfig file
3. npm install -D @types/node


## setup prettier
1.  npm install --save-dev --save-exact prettier: 
- here we are using exact command because, prettier is optionated package,
it behanves different in each version
- so when we start developing we donot want to change prettier version, to use always same version we have used exact

## Eslint
- eslint is static code analyzer
- it check quality of our code
- search eslit typescript for setting up eslint
- you need to go to prettier and check eslint vs prettier
    sometime eslint and prettier may conflict so we need package to work both prettier and eslint properly, so use below npm package for that
    npm install --save-dev eslint-config-prettier 


##husky
- it is pre commit hook help to run some script before commiting our code
- pre commit hook will run script for all the file, it is not best way
- we want to run precommit script only for the file that have been changed for this we will use `lint staged` package

## creating teamplete 
- creating this auth-service as template will help to create other services
- here we will have one origin where we push our code and one origin template to push our template

scenario:
1. auth service have already one origin , now we will add template origin 
2. first create github repo to store this auth-service as template
3. copy remote address and type in terminal below command
   git remote add template <github-origin-url>


## Dockerizing Applicaiton:
1. Read more : https://codersgyan.notion.site/Containerisation-Express-app-ecd8f3c5acf446629acdc67cff4ca55f

Notes:
- when we run our aplication inside node_modules .bin folder is created
= .bin is a binary files that are created for that specifici host machined
= this bin binaries is required to run application
= when we run this aplication in different host different binaries are created


## Docker command:
1. docker build -t {name} -f docker/dev/Dockerfile .
2. docker run --rm -it -v $(pwd):/usr/src/app -v /usr/src/app/node_modules --env-file $(pwd)/.env.dev -p 3000:3000 -e NODE_ENV=development auth-service:dev

    Certainly! Let's break down the `docker run` command with its various options and arguments:

```bash
docker run --rm -it -v $(pwd):/usr/src/app -v /usr/src/app/node_modules --env-file $(pwd)/.env.dev -p 3000:3000 -e NODE_ENV=development auth-service:dev
```

Here's a breakdown of each part:

1. `docker run`: This is the command to run a Docker container.

2. `--rm`: This option removes the container automatically after it exits. It helps to keep your system clean by removing the container when it's no longer needed.

3. `-it`: This option combines two flags:
   - `-i`: Keep STDIN open even if not attached.
   - `-t`: Allocate a pseudo-TTY (text terminal). This option is often used to run the container in interactive mode.

4. `-v $(pwd):/usr/src/app`: This option mounts the current working directory (`$(pwd)`) on the host machine to the `/usr/src/app` directory inside the container. This is a common practice to share code between the host and the container.

5. `-v /usr/src/app/node_modules`: This option mounts the `/usr/src/app/node_modules` directory inside the container. It's a common optimization in Node.js projects to prevent overwriting the `node_modules` directory with a potentially different version from the host.

6. `--env-file $(pwd)/.env`: This option specifies an environment file (`$(pwd)/.env`) to be used by the container. Environment files often contain key-value pairs for environment variables.

7. `-p 5501:5501`: This option maps port 5501 from the host to port 5501 in the container. It allows you to access services running inside the container on this specified port from your host machine.

8. `-e NODE_ENV=development`: This option sets the `NODE_ENV` environment variable inside the container to "development."

9. `auth-prep:dev`: This is the name of the Docker image to run. It specifies the image to use and the tag (in this case, "dev").

In summary, this `docker run` command is designed to start a Docker container based on the `auth-prep` image in development mode. It mounts the current working directory to `/usr/src/app` inside the container, uses an environment file for setting environment variables, and maps port 5501 between the host and the container. The container is removed automatically after it exits (`--rm`), 
and it is run in interactive mode (`-it`).


## Docker setup guide
1.https://codersgyan.notion.site/Setting-up-PostgreSQL-in-a-Docker-Container-with-Persistent-Volume-58711388eb244c9fa1597d87783e3f92


course pointer: create refresh token
